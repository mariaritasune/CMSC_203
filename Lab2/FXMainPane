import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;

/**
 * This panel is the basic panel, inside which other panels are placed.  
 * Before beginning to implement, design the structure of your GUI in order to 
 * understand what panels go inside which ones, and what buttons or other components
 * go in which panels.  
 * @author ralexander
 *
 */

//make the main panel's layout be a VBox
public class FXMainPane extends VBox {

	//student Task #2:
	// Declare five buttons, a label, and a textfield
	private Button buttonHello;
	private Button buttonHowdy;
	private Button buttonChinese;
	private Button buttonClear;
	private Button buttonExit;
	private Label labelFeedback;
	private TextField textFieldInput;

	// Declare two HBoxes
	private HBox hboxTop;
	private HBox hboxBottom;
	private DataManager dataManager;

	//student Task #4:
	//  declare an instance of DataManxager
	
	/**
	 * The MainPanel constructor sets up the entire GUI in this approach.  Remember to
	 * wait to add a component to its containing component until the container has
	 * been created.  This is the only constraint on the order in which the following 
	 * statements appear.
	 */
	
	FXMainPane() {
	//student Task #2:
	//  instantiate the buttons, label, and textfield
	//  instantiate the HBoxes
	
	buttonHello = new Button("Hello");
	buttonHowdy = new Button("Howdy");
	buttonChinese = new Button("Chinese");
	buttonClear = new Button("Clear");
	buttonExit = new Button("Exit");
	
	// Instantiate the label with the argument
	labelFeedback = new Label("Feedback:");

	// Instantiate the textfield
	textFieldInput = new TextField();	
	hboxTop = new HBox();
	hboxBottom = new HBox();
	
	//student Task #4:
	//  instantiate the DataManager instance
	dataManager = new DataManager();
	
	//student Task #3
	
	// Add buttons to hboxTop
	hboxTop.getChildren().addAll(buttonHello, buttonHowdy, buttonChinese, buttonClear, buttonExit);
	
	// Add label and textfield to hboxBottom
	hboxBottom.getChildren().addAll(labelFeedback, textFieldInput);
	
	// Add HBoxes to the VBox (FXMainPane)
	getChildren().addAll(hboxTop, hboxBottom);
	
	// Set margins and alignment
	setMarginsAndAlignment();
	
	// Set event handlers for buttons
	buttonHello.setOnAction(new ButtonHandler());
	buttonHowdy.setOnAction(new ButtonHandler());
	buttonChinese.setOnAction(new ButtonHandler());
	buttonClear.setOnAction(new ButtonHandler());
	buttonExit.setOnAction(new ButtonHandler());
	}
	
	// Inner class to handle button events
	private class ButtonHandler implements EventHandler<ActionEvent> {
	public void handle(ActionEvent event) {
	
		if (event.getSource() == buttonHello) {
		String response = dataManager.getHello();
		textFieldInput.setText(response);
		} else if (event.getSource() == buttonHowdy) {
		String response = dataManager.getHowdy();
		textFieldInput.setText(response);
		} else if (event.getSource() == buttonChinese) {
		String response = dataManager.getChinese();
		textFieldInput.setText(response);
		} else if (event.getSource() == buttonClear) {
		textFieldInput.setText("");
		} else if (event.getSource() == buttonExit) {
	
		System.exit(0);
	
		}
	
	}
}
	
	// Method to set margins and alignment
	private void setMarginsAndAlignment() {
	
	HBox.setMargin(buttonHello, new Insets(30));
	HBox.setMargin(buttonHowdy, new Insets(30));
	HBox.setMargin(buttonChinese, new Insets(30));
	HBox.setMargin(buttonClear, new Insets(30));
	HBox.setMargin(buttonExit, new Insets(30));
	hboxTop.setAlignment(Pos.CENTER);
	hboxBottom.setAlignment(Pos.CENTER);
	
	}

}

